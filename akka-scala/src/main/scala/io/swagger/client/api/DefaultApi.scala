/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.LamppostStation
import io.swagger.client.model.LamppostStationConnectedSensorMeasuredValue
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object DefaultApi {

  /**
   * 
   * Expected answers:
   *   code 200 :  (OK)
   *   code 204 :  (NO CONTENT)
   *   code 404 :  (NOT FOUND CONTENT)
   * 
   * @param lat lat 
   * @param lng lng
   * @param radius radius
   */
  def lamppostsGet(lat: Option[Double] = None, lng: Option[Double] = None, radius: Option[Double] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://api.smartdataplatform.info", "/lampposts", "application/json")
      .withQueryParam("lat", lat)
      .withQueryParam("lng", lng)
      .withQueryParam("radius", radius)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](204)
      .withErrorResponse[Unit](404)
        /**
   * 
   * Expected answers:
   *   code 200 : Seq[LamppostStationConnectedSensorMeasuredValue] (OK)
   *   code 204 :  (NO CONTENT)
   *   code 404 :  (NOT FOUND CONTENT)
   * 
   * @param lamppostId 
   * @param connectedSensorId 
   * @param timestampFrom timestampFrom
   * @param timestampTo timestampTo
   * @param interval interval
   */
  def lamppostsLamppostIdConnectedSensorsConnectedSensorIdMeasuredValuesGet(lamppostId: String, connectedSensorId: String, timestampFrom: Option[String] = None, timestampTo: Option[String] = None, interval: Option[String] = None): ApiRequest[Seq[LamppostStationConnectedSensorMeasuredValue]] =
    ApiRequest[Seq[LamppostStationConnectedSensorMeasuredValue]](ApiMethods.GET, "https://api.smartdataplatform.info", "/lampposts/{lamppostId}/connectedSensors/{connectedSensorId}/measuredValues", "application/json")
      .withQueryParam("timestampFrom", timestampFrom)
      .withQueryParam("timestampTo", timestampTo)
      .withQueryParam("interval", interval)
      .withPathParam("lamppostId", lamppostId)
      .withPathParam("connectedSensorId", connectedSensorId)
      .withSuccessResponse[Seq[LamppostStationConnectedSensorMeasuredValue]](200)
      .withErrorResponse[Unit](204)
      .withErrorResponse[Unit](404)
        /**
   * This is an example opeartion to show how security is applied to the call.
   * 
   * Expected answers:
   *   code 200 : LamppostStation (OK)
   *   code 204 :  (NO CONTENT)
   *   code 404 :  (NOT FOUND CONTENT)
   * 
   * @param lamppostId ID of Station to return data for
   */
  def lamppostsLamppostIdGet(lamppostId: String): ApiRequest[LamppostStation] =
    ApiRequest[LamppostStation](ApiMethods.GET, "https://api.smartdataplatform.info", "/lampposts/{lamppostId}", "application/json")
      .withPathParam("lamppostId", lamppostId)
      .withSuccessResponse[LamppostStation](200)
      .withErrorResponse[Unit](204)
      .withErrorResponse[Unit](404)
      

}

